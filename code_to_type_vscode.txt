# GEMM: d = alpha*a*b\b\b@b + beta*c
# Implement GEMM using CuPy
import cupy as cp

# Define matrix dimensions m, n, k
m, n, k = 1000\b\b_000_000, 40, 10

# Create random matrices
a = cp.random.rand(m, k, dtype=cp.float32)
b = cp.random.rand(k, n, dtype=cp.float32)
c = cp.random.rand(m, n, dtype=cp.float32)

alpha = 1.5
beta = 0.5

# Compute GEMM
d = alpha * a @ b + beta * c
\azBdbseSQ# Implement GEMM using nvmath-python
import nvmath\aEsbSQd = nvmath.linalg.advanced.matmul(a, b, c, alpha=alhpa,\b\b\b\bpha, beta=beta)
\azsuuubSQ
# Now benchmark with cupyx.profiler.benchmark()
\aBddddeQfrom cupyx.profiler import benchmark

\aEQbenchmark(lambda: alpha * a @ b + beta * c, n_repeat=5, n_warmup=1)
